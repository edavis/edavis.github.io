<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Technology on Eric Davis</title>
    <link>https://edavis.github.io/categories/technology/</link>
    <description>Recent content in Technology on Eric Davis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 10 May 2017 20:57:29 +0000</lastBuildDate>
    
	<atom:link href="https://edavis.github.io/categories/technology/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go in one word? Productivity</title>
      <link>https://edavis.github.io/2017/05/10/go-in-one-word-productivity/</link>
      <pubDate>Wed, 10 May 2017 20:57:29 +0000</pubDate>
      
      <guid>https://edavis.github.io/2017/05/10/go-in-one-word-productivity/</guid>
      <description>I&amp;rsquo;ve been batting around this idea over the past few days. Go is a great language and it has many superb features, but if I had to distill what I like so much about Go into one word, that word would be &amp;ldquo;productive.&amp;rdquo; I feel so incredibly productive writing Go code.
Start with the documentation. I love Go&amp;rsquo;s documentation. I don&amp;rsquo;t know how much of it was a conscious decision by the developers, but the &amp;ldquo;culture of documentation&amp;rdquo; that I loved in Python is very much alive in the Go community.</description>
    </item>
    
    <item>
      <title>How to track traffic in Google Analytics without JS</title>
      <link>https://edavis.github.io/2017/05/07/how-to-track-traffic-in-google-analytics-without-js/</link>
      <pubDate>Sun, 07 May 2017 08:50:26 +0000</pubDate>
      
      <guid>https://edavis.github.io/2017/05/07/how-to-track-traffic-in-google-analytics-without-js/</guid>
      <description>I&amp;rsquo;ve long wanted to hook up the RSS feeds on hnrss.org to Google Analytics so I could get a better sense of what kind of traffic the site got. But because the feeds are delivered as XML, I had to figure out a way to do it without JavaScript.
After some poking around yesterday, I finally figured out a way.
Google Analytics has a Measurement Protocol API built for this sort of thing.</description>
    </item>
    
    <item>
      <title>Enable WordPress maintenance mode</title>
      <link>https://edavis.github.io/2016/02/26/enable-wordpress-maintenance-mode/</link>
      <pubDate>Fri, 26 Feb 2016 17:00:41 +0000</pubDate>
      
      <guid>https://edavis.github.io/2016/02/26/enable-wordpress-maintenance-mode/</guid>
      <description>Create a &amp;ldquo;.maintenance&amp;rdquo; file in the webroot and include the following:
&amp;lt;?php $upgrading = 1455233470; ?&amp;gt;  Place the file in the root of a WordPress installation.
The number is a UNIX timestamp. If the timestamp is less than 10 minutes ago, the &amp;ldquo;maintenance mode&amp;rdquo; screen will be displayed. After 10 minutes, WordPress bypasses maintenance mode and loads the site as normal.
Maintenance mode will also be bypassed if the file exists but is empty.</description>
    </item>
    
    <item>
      <title>Understanding the WordPress homepage template hierarchy</title>
      <link>https://edavis.github.io/2016/01/29/understanding-the-wordpress-homepage-template-hierarchy/</link>
      <pubDate>Fri, 29 Jan 2016 11:28:59 +0000</pubDate>
      
      <guid>https://edavis.github.io/2016/01/29/understanding-the-wordpress-homepage-template-hierarchy/</guid>
      <description>I&amp;rsquo;ve spent a few hours trying to wrap my head around how WordPress determines which template to use depending on which &amp;ldquo;Front page displays&amp;rdquo; option has been set. I&amp;rsquo;m writing this as the guide I wish existed when I was looking into this.
If &amp;ldquo;Front page displays&amp;rdquo; is set to &amp;ldquo;Your latest posts,&amp;rdquo; WordPress will use front-page.php to render your homepage if the file exists. If front-page.php doesn&amp;rsquo;t exist, WordPress will use home.</description>
    </item>
    
    <item>
      <title>203 days of WordPress</title>
      <link>https://edavis.github.io/2015/07/27/203-days-of-wordpress/</link>
      <pubDate>Mon, 27 Jul 2015 10:13:47 +0000</pubDate>
      
      <guid>https://edavis.github.io/2015/07/27/203-days-of-wordpress/</guid>
      <description>I started building websites with WordPress back in January when I started my new job. Prior to that I worked almost exclusively with Django. I&amp;rsquo;ve been meaning to write about my experience making the change because it&amp;rsquo;s not a common one. Most developers start with WordPress and eventually graduate to Django (and then write how much better Django is). Here are my impressions, in no particular order:  Plain ole&amp;rsquo; WordPress is actually quite nice.</description>
    </item>
    
    <item>
      <title>Confessions of a web developer</title>
      <link>https://edavis.github.io/2015/03/05/confessions-of-a-web-developer/</link>
      <pubDate>Thu, 05 Mar 2015 15:15:08 +0000</pubDate>
      
      <guid>https://edavis.github.io/2015/03/05/confessions-of-a-web-developer/</guid>
      <description>I do sometimes wonder whether my starting programming as a web developer and not as some hardcore assembly hacker will ultimately lower my ceiling on what I can accomplish.
I&amp;rsquo;ve never really had to deal with memory management, hardware, or stuff like that. I started by building super simple HTML pages, learned some CSS, moved on to PHP before jumping ship to Python where I&amp;rsquo;ve largely stayed. Of course I&amp;rsquo;ve dabbled with tons of languages in between, but web and python programming is how I categorize what I do.</description>
    </item>
    
    <item>
      <title>Using the Vary header with the @cache_page decorator</title>
      <link>https://edavis.github.io/2015/02/27/using-the-vary-header-with-the-cache_page-decorator/</link>
      <pubDate>Fri, 27 Feb 2015 22:30:22 +0000</pubDate>
      
      <guid>https://edavis.github.io/2015/02/27/using-the-vary-header-with-the-cache_page-decorator/</guid>
      <description>Problem
Earlier today I needed to cache a view with the @cache_page decorator. The output of this view changes depending on whether the user making the request is logged in or not. Pretty standard stuff.
However, I quickly discovered that @cache_page was caching both authenticated and anonymous requests under the same cache key. This led to the cache serving either the authenticated or anonymous version of the page, whichever was cached first.</description>
    </item>
    
    <item>
      <title>Creating a UTF-8 database in PostgreSQL</title>
      <link>https://edavis.github.io/2015/02/06/creating-a-utf-8-database-in-postgresql/</link>
      <pubDate>Fri, 06 Feb 2015 09:04:56 +0000</pubDate>
      
      <guid>https://edavis.github.io/2015/02/06/creating-a-utf-8-database-in-postgresql/</guid>
      <description>I always forget the proper incantation for creating UTF-8 databases in PostgreSQL. I just had to do this for a project so I&amp;rsquo;m writing it down for future reference. Maybe it&amp;rsquo;ll be useful to somebody else out there.
&amp;lt;code&amp;gt;sudo -u postgres createdb -E UTF8 -T template0 --locale=en_US.utf8 template_utf8&amp;lt;/code&amp;gt;  Now use this UTF-8 &amp;ldquo;template database&amp;rdquo; when creating your project database:
&amp;lt;code&amp;gt;createdb -T template_utf8 new_database&amp;lt;/code&amp;gt;  </description>
    </item>
    
    <item>
      <title>How Slackware made me a better developer</title>
      <link>https://edavis.github.io/2014/09/21/how-slackware-made-me-a-better-developer/</link>
      <pubDate>Sun, 21 Sep 2014 14:27:00 +0000</pubDate>
      
      <guid>https://edavis.github.io/2014/09/21/how-slackware-made-me-a-better-developer/</guid>
      <description>Kwame Opam reminiscences about Linux and how it&#39;ll always hold a special place in his heart:   Thinking about this, I remembered how much I loved (and still love) Linux. And I had to reminisce. I remember being a pimply high school kid circa 2002 and configuring Gentoo Linux by hand — kernel and all — onto my little beige eMachines computer, losing days of actual productivity in the process.</description>
    </item>
    
    <item>
      <title>A polyglot guide to package management</title>
      <link>https://edavis.github.io/2014/09/21/a-polyglot-guide-to-package-management/</link>
      <pubDate>Sun, 21 Sep 2014 11:47:00 +0000</pubDate>
      
      <guid>https://edavis.github.io/2014/09/21/a-polyglot-guide-to-package-management/</guid>
      <description>Here&amp;rsquo;s something I would love to see: An online guide that explained everything you need to know about installing packages using a particular language&amp;rsquo;s package manager.
I use Python&amp;rsquo;s package manager, pip, on a near-daily basis. I know that even if a package author doesn&amp;rsquo;t mention virtualenv in the docs, I can quickly create one and install the package there to keep things separate if I want to. And if a package author does mention virtualenv, I&amp;rsquo;ll understand the purpose of that step.</description>
    </item>
    
    <item>
      <title>Introducing homebrew-emacs</title>
      <link>https://edavis.github.io/2014/09/20/introducing-homebrew-emacs/</link>
      <pubDate>Sat, 20 Sep 2014 15:25:00 +0000</pubDate>
      
      <guid>https://edavis.github.io/2014/09/20/introducing-homebrew-emacs/</guid>
      <description>Over the past few days I&amp;rsquo;ve been working on a repository of Emacs packages that can be installed via Homebrew. Now that it has a handful of useful packages available, it felt like a good time to officially introduce homebrew-emacs to the world.
It is a &amp;ldquo;tap&amp;rdquo; that, once installed, allows you to install Emacs packages using the Homebrew package manager. The README has installation and configuration instructions.
Package management is one of those things I really don&amp;rsquo;t want to spend too much time thinking about.</description>
    </item>
    
  </channel>
</rss>